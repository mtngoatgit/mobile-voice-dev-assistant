// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// User model for Clerk integration
model User {
    id            String         @id // This will be the Clerk user ID
    email         String?        @unique
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    posts         Post[]
    voiceSessions VoiceSession[]
}

// Voice Dev Assistant Models
model VoiceSession {
    id          String      @id @default(cuid())
    userId      String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    transcripts Transcript[]
    plans       VoicePlan[]

    @@index([userId, createdAt])
}

model Transcript {
    id        String       @id @default(cuid())
    sessionId String
    text      String       @db.Text
    duration  Int?         // in milliseconds
    createdAt DateTime     @default(now())
    session   VoiceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    plans     VoicePlan[]

    @@index([sessionId, createdAt])
}

model VoicePlan {
    id           String       @id @default(cuid())
    sessionId    String
    transcriptId String
    provider     String       // 'claude' | 'openai' | 'gemini'
    planJson     String       @db.Text // JSON string of the plan
    summary      String       @db.Text
    rationale    String       @db.Text
    createdAt    DateTime     @default(now())
    session      VoiceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    transcript   Transcript   @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
    issueRefs    IssueRef[]

    @@index([sessionId, createdAt])
}

model IssueRef {
    id          String    @id @default(cuid())
    planId      String
    repo        String    // "owner/name" format
    issueNumber Int
    url         String
    title       String    @db.Text
    createdAt   DateTime  @default(now())
    plan        VoicePlan @relation(fields: [planId], references: [id], onDelete: Cascade)

    @@index([planId])
    @@index([repo, issueNumber])
}
